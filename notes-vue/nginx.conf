server {
    listen 80;
    server_name localhost; # 可以根据需要修改

    # 设置静态文件的根目录 (与 Dockerfile 中复制到的目录一致)
    root /usr/share/nginx/html;
    index index.html index.htm;

    location / {
        # 尝试匹配请求的文件 ($uri) 或目录 ($uri/)
        # 如果找不到，则回退到 /index.html，让 Vue Router 处理路由
        try_files $uri $uri/ /index.html;
    }

    # (可选但非常推荐) 配置 API 代理，避免前端直接请求后端地址导致 CORS 问题
    # 假设所有后端 API 请求都以 /api/ 开头
    location /api/ {
        # proxy_pass 指向后端服务的 Docker Compose 服务名和端口
        # 'backend' 是下面 docker-compose.yml 中定义的服务名
        # 8000 是 FastAPI 容器暴露的端口
        proxy_pass http://backend:8000; # 注意：这里没有 / 结尾

        # 设置一些代理头，以便后端能获取真实信息
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;

        # 如果你的 FastAPI 配置了 root_path="/api"
        # 可能需要重写路径，去掉 /api 前缀转发给后端
        # rewrite ^/api/(.*)$ /$1 break; # 如果 FastAPI 没有配置 root_path
        # 或者如果 FastAPI 配置了 root_path="/api"，则不需要 rewrite
    }

    # (可选) 添加 gzip 压缩以优化传输
    gzip on;
    gzip_vary on;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;

    # (可选) 错误页面处理
    error_page 500 502 503 504 /50x.html;
    location = /50x.html {
        root /usr/share/nginx/html;
    }
}
